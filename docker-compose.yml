version: '3.8'

services:
  # frontend
  frontend:
    build: ./services/frontend
    container_name: frontend
    command: npm run serve -- --port 8085
    ports:
    - "8085:8085"
    depends_on: 
      backend:
        condition: service_started
      kong:
        condition: service_healthy
    # restart: always
    networks:
      - default

  #backend
  backend:
    build: ./services/backend
    container_name: backend
    command: ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8005"]
    env_file: .env
    environment:
      BACKEND_USER: ${BACKEND_USER}
      BACKEND_PASSWORD: ${BACKEND_PASSWORD}
      BACKEND_DB: ${BACKEND_DB}
      KONG_HOST_IP: kong
      KONG_PORT: 8001
    ports:
      - "8005:8005"
    depends_on:
      postgres:
        condition: service_healthy
      kong:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    # restart: always
    networks:
      - default

  # db
  postgres:
    container_name: postgres
    image: postgres:9.5
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./services/backend/postgres-data:/var/lib/postgresql/data
      - ./services/backend/db_init.sql:/docker-entrypoint-initdb.d/create_tables.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 20s
      timeout: 5s
      retries: 15
    # restart: always
    networks:
      - default

  # gpt-2
  # gpt2:
  #   build: ./services/gpt-2
  #   container_name: gpt2
  #   command: "python3 auto_generate_texts.py"
  #   environment:
  #     BACKEND_USER: ${BACKEND_USER}
  #     BACKEND_PASSWORD: ${BACKEND_PASSWORD}
  #     BACKEND_DB: ${BACKEND_DB}
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     backend:
  #       condition: service_started
  #   networks:
  #     - default
  #   restart: on-failure

  kong-migration:
    image: kong:2.6.0
    container_name: kong-migration
    command: "kong migrations bootstrap --v"
    networks:
      - default
    restart: on-failure
    env_file: .env
    environment:
      KONG_DATABASE: ${KONG_DATABASE}
      KONG_PG_HOST: ${KONG_PG_HOST}
      KONG_PG_PORT: ${KONG_PG_PORT}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
    depends_on:
      postgres:
        condition: service_healthy

  kong:
    build: ./services/kong
    container_name: kong
    networks:
      - default
    env_file: .env
    restart: on-failure
    environment:
      KONG_DATABASE: ${KONG_DATABASE}
      KONG_PG_HOST: ${KONG_PG_HOST}
      KONG_PG_PORT: ${KONG_PG_PORT}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PLUGINS: "oidc,bundled"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 5s
      timeout: 5s
      retries: 15
    depends_on:
      - kong-migration
    ports:
      - "8000:8000/tcp"
      - "8443:8443/tcp"
      - "8001:8001/tcp"
      - "8444:8444/tcp"
      - "8002:8002/tcp"
      - "8445:8445/tcp"
      - "8003:8003/tcp"
      - "8004:8004/tcp"


  keycloak:
    image: jboss/keycloak:15.0.1
    container_name: keycloak
    networks:
      - default
    ports:
      - "8080:8080"
    env_file: .env
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/auth/realms/master"]
      interval: 5s
      timeout: 5s
      retries: 15
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure